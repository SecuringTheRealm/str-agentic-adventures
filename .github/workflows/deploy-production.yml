---
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

# Required permissions for OIDC authentication with Azure
permissions:
  id-token: write   # Required for requesting OIDC JWT tokens
  contents: read    # Required for accessing repository content

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Note: No environment specified to generate correct federated identity subject claim:
    # repo:SecuringTheRealm/str-agentic-adventures:ref:refs/heads/main

    steps:
    - name: Check Azure secrets
      id: check-secrets
      run: |
        # Check if we have federated credentials
        if [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ] && [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
          echo "secrets-available=true" >> $GITHUB_OUTPUT
          echo "use-federated-auth=true" >> $GITHUB_OUTPUT
          echo "use-service-principal=false" >> $GITHUB_OUTPUT
        # Check if we have service principal credentials
        elif [ -n "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "secrets-available=true" >> $GITHUB_OUTPUT
          echo "use-federated-auth=false" >> $GITHUB_OUTPUT
          echo "use-service-principal=true" >> $GITHUB_OUTPUT
        else
          echo "::error::Azure secrets are not configured. Production deployment requires Azure credentials."
          echo "secrets-available=false" >> $GITHUB_OUTPUT
          echo "use-federated-auth=false" >> $GITHUB_OUTPUT
          echo "use-service-principal=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Log in with Azure (Federated Credentials)
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.check-secrets.outputs.use-federated-auth == 'true'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in with Azure (Service Principal)
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.check-secrets.outputs.use-service-principal == 'true'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Infrastructure with Bicep
      id: infrastructure-deploy
      uses: azure/bicep-deploy@v2
      with:
        type: deployment
        operation: create
        name: production-${{ github.run_number }}
        location: ${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus' }}
        scope: subscription
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        template-file: infra/main.bicep
        parameters-file: infra/main.bicepparam
        environmentName: production
        azureOpenAiEndpoint: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        azureOpenAiApiKey: ${{ secrets.AZURE_OPENAI_API_KEY }}
        azureOpenAiChatDeployment: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT || 'gpt-4o-mini' }}
        azureOpenAiEmbeddingDeployment: ${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT || 'text-embedding-ada-002' }}
        azureOpenAiDalleDeployment: ${{ vars.AZURE_OPENAI_DALLE_DEPLOYMENT || 'dall-e-3' }}
      timeout-minutes: 20

    - name: Build and deploy backend container
      id: backend-deploy
      if: steps.infrastructure-deploy.outcome == 'success'
      run: |
        # Get deployment outputs from the infrastructure deployment
        RESOURCE_GROUP="${{ steps.infrastructure-deploy.outputs.AZURE_RESOURCE_GROUP }}"
        CONTAINER_APP_ENVIRONMENT="${{ steps.infrastructure-deploy.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_ID }}"

        # Use production naming
        CONTAINER_APP_NAME="production-backend"

        echo "Deploying backend container app: $CONTAINER_APP_NAME"
        echo "Resource Group: $RESOURCE_GROUP"
        echo "Container Apps Environment: $CONTAINER_APP_ENVIRONMENT"

        # Navigate to backend directory
        cd backend

        # Create or update the container app with source code
        az containerapp up \
          --name "$CONTAINER_APP_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --environment "$CONTAINER_APP_ENVIRONMENT" \
          --source . \
          --target-port 8000 \
          --ingress external \
          --cpu 1.0 \
          --memory 2.0Gi \
          --env-vars \
            "AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" \
            "AZURE_OPENAI_API_VERSION=2023-12-01-preview" \
            "AZURE_OPENAI_CHAT_DEPLOYMENT=${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT || 'gpt-4o-mini' }}" \
            "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT || 'text-embedding-ada-002' }}" \
            "AZURE_OPENAI_DALLE_DEPLOYMENT=${{ vars.AZURE_OPENAI_DALLE_DEPLOYMENT || 'dall-e-3' }}" \
            "APP_HOST=0.0.0.0" \
            "APP_PORT=8000" \
            "APP_DEBUG=false" \
            "APP_LOG_LEVEL=info" \
            "SEMANTIC_KERNEL_DEBUG=false" \
          --quiet

        # Get the FQDN of the deployed container app
        BACKEND_FQDN=$(az containerapp show --name "$CONTAINER_APP_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.configuration.ingress.fqdn" --output tsv)
        BACKEND_URI="https://$BACKEND_FQDN"

        echo "Backend deployed to: $BACKEND_URI"
        echo "backend-status=success" >> $GITHUB_OUTPUT
        echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
      timeout-minutes: 15

    - name: Deploy frontend to Static Web App
      id: frontend-deploy
      if: steps.infrastructure-deploy.outcome == 'success' && steps.backend-deploy.outputs.backend-status == 'success'
      run: |
        # Get Static Web App details
        RESOURCE_GROUP="${{ steps.infrastructure-deploy.outputs.AZURE_RESOURCE_GROUP }}"
        SWA_NAME="production-frontend"

        echo "Deploying frontend to Static Web App: $SWA_NAME"
        echo "Resource Group: $RESOURCE_GROUP"

        # Build frontend with backend URL
        cd frontend
        npm ci

        # Set backend URL for build
        export REACT_APP_API_URL="${{ steps.backend-deploy.outputs.backend-uri }}"
        npm run build

        # Get deployment token from the Static Web App (if it exists)
        if az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" --output tsv 2>/dev/null || echo "")
          SWA_DEFAULT_HOSTNAME=$(az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "defaultHostname" --output tsv)
          FRONTEND_URI="https://$SWA_DEFAULT_HOSTNAME"
        else
          echo "::warning::Static Web App $SWA_NAME not found in resource group $RESOURCE_GROUP"
          DEPLOYMENT_TOKEN=""
          FRONTEND_URI="${{ steps.infrastructure-deploy.outputs.FRONTEND_URI || 'Static Web App not available' }}"
        fi

        if [ -z "$DEPLOYMENT_TOKEN" ]; then
          echo "::warning::Could not retrieve deployment token for Static Web App $SWA_NAME"
          echo "frontend-status=token-failed" >> $GITHUB_OUTPUT
          echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
        else
          echo "frontend-status=success" >> $GITHUB_OUTPUT
          echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT
          echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
        fi
      timeout-minutes: 10

    - name: Deploy frontend using Static Web Apps action
      if: steps.frontend-deploy.outputs.frontend-status == 'success'
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ steps.frontend-deploy.outputs.deployment-token }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: 'frontend'
        output_location: 'build'
        skip_deploy_on_missing_secrets: true

    - name: Get deployment outputs
      id: deployment-outputs
      if: steps.infrastructure-deploy.outcome == 'success'
      run: |
        echo "Getting deployment outputs..."

        # Use outputs from backend and frontend deployments
        BACKEND_URI="${{ steps.backend-deploy.outputs.backend-uri || 'Backend deployment in progress' }}"
        FRONTEND_URI="${{ steps.frontend-deploy.outputs.frontend-uri || steps.infrastructure-deploy.outputs.FRONTEND_URI || 'Frontend deployment in progress' }}"

        echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
        echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT

        echo "Backend URI: $BACKEND_URI"
        echo "Frontend URI: $FRONTEND_URI"

    - name: Create deployment summary
      if: steps.infrastructure-deploy.outcome == 'success'
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## 🚀 Production Deployment Successful

        ### Deployed Resources
        - **Backend API**: ${{ steps.deployment-outputs.outputs.backend-uri || 'Deployment in progress' }}
        - **Frontend App**: ${{ steps.deployment-outputs.outputs.frontend-uri || 'Deployment in progress' }}

        ### Environment
        - **Azure Subscription**: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - **Location**: ${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus' }}
        - **Environment**: production

        ### Next Steps
        1. Verify the application is running correctly
        2. Check Azure OpenAI integration
        3. Test the AI Dungeon Master functionality
        EOF

    - name: Create deployment summary (Failure)
      if: failure() || steps.infrastructure-deploy.outcome == 'failure'
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## ❌ Production Deployment Failed

        The production deployment failed. Please check the workflow logs for details.

        ### Common Issues:
        - Azure resource provisioning errors
        - Configuration issues
        - Resource quotas exceeded
        - Azure authentication issues

        ### Next Steps:
        1. Review the workflow logs for specific error messages
        2. Check Azure portal for resource status
        3. Verify Azure secrets and configuration
        4. Re-run the deployment after fixing issues
        EOF
