---
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

# Required permissions for OIDC authentication with Azure
permissions:
  id-token: write   # Required for requesting OIDC JWT tokens
  contents: read    # Required for accessing repository content

# Ensure only one production deployment runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-production:
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment-name: "production"
      resource-group-name: "str_agentic_prod"
      location: ${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus2' }}
      stack-name: "production-${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus2' }}"
      container-app-name: "production-backend"
      frontend-build-path: "frontend/build"
      is-production: true
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}

  create-deployment-summary:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Create deployment summary (Success)
      if: needs.deploy-production.outputs.deployment-status == 'success'
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## üöÄ Production Deployment Successful

        ### Deployed Resources
        - **Backend API**: ${{ needs.deploy-production.outputs.backend-uri }}
        - **Frontend App**: ${{ needs.deploy-production.outputs.frontend-uri }}

        ### Environment
        - **Azure Subscription**: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        - **Location**: ${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus2' }}
        - **Environment**: production

        ### Next Steps
        1. Verify the application is running correctly
        2. Check Azure OpenAI integration
        3. Test the AI Dungeon Master functionality
        EOF

    - name: Create deployment summary (Failure)
      if: needs.deploy-production.outputs.deployment-status != 'success'
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## ‚ùå Production Deployment Failed

        The production deployment failed. Please check the workflow logs for details.

        ### Status: ${{ needs.deploy-production.outputs.deployment-status }}

        ### Common Issues:
        - Azure resource provisioning errors
        - Configuration issues
        - Resource quotas exceeded
        - Azure authentication issues

        ### Next Steps:
        1. Review the workflow logs for specific error messages
        2. Check Azure portal for resource status
        3. Verify Azure secrets and configuration
        4. Re-run the deployment after fixing issues
        EOF
