---
name: Integration Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run nightly at 2 AM UTC to save runner minutes
    - cron: '0 2 * * *'

jobs:
  # Job to detect which files have changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      integration: ${{ steps.filter.outputs.integration }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for file changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
          integration:
            - 'frontend/**'
            - 'backend/**'

  backend-integration-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'schedule' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install backend dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        uv sync

    - name: Run backend integration tests (slow)
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        cd backend
        uv run python -m pytest tests/ -m "integration or slow" --durations=20 -v

    - name: Run comprehensive backend tests
      run: |
        python -c "
        import sys
        sys.path.append('backend')
        from backend.tests.test_structure_validation import TestProjectStructure, TestFrontendBackendAPIMapping
        from backend.tests.test_end_to_end import TestEndToEndWorkflows, TestComponentIntegration

        print('=== Running Backend Structure Tests ===')
        test_structure = TestProjectStructure()
        test_structure.test_backend_file_structure()
        test_structure.test_python_syntax_validation()
        test_structure.test_api_endpoints_defined()
        test_structure.test_model_imports_structure()
        test_structure.test_requirements_file_exists()

        print('=== Running API Mapping Tests ===')
        test_mapping = TestFrontendBackendAPIMapping()
        test_mapping.test_api_url_mapping()
        test_mapping.test_api_base_url_consistency()

        print('=== Running End-to-End Tests ===')
        test_workflows = TestEndToEndWorkflows()
        test_workflows.test_character_creation_workflow()
        test_workflows.test_campaign_creation_workflow()
        test_workflows.test_player_input_workflow()
        test_workflows.test_image_generation_workflow()

        print('=== Running Component Integration Tests ===')
        test_integration = TestComponentIntegration()
        test_integration.test_api_route_coverage()
        test_integration.test_model_field_consistency()
        test_integration.test_agent_integration_points()

        print('✅ All backend integration tests passed')
        "

  cross-component-integration:
    runs-on: ubuntu-latest
    needs: [changes, backend-integration-tests]
    if: ${{ always() && needs.changes.outputs.integration == 'true' && (needs.backend-integration-tests.result == 'success' || needs.backend-integration-tests.result == 'skipped') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh

    - name: Install backend dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        uv sync

    - name: Check API compatibility
      run: |
        python -c "
        import sys
        sys.path.append('backend')
        from backend.app.models.game_models import *
        from backend.app.main import app
        print('✅ Backend models and API routes compatible')
        "

    - name: Performance regression check
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        cd backend
        echo "Running performance regression tests..."
        uv run python -m pytest tests/test_parameterized_combat.py -m "slow" --durations=10 -v
        echo "✅ Performance tests completed"