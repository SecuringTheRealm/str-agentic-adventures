name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --run
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
        
    - name: Run backend linting
      run: |
        cd backend
        python -m ruff check app/ tests/
        
  integration-check:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install dependencies
      run: |
        cd frontend && npm ci --legacy-peer-deps
        cd ../backend && pip install -r requirements.txt
        
    - name: Check API compatibility
      run: |
        cd backend
        python -c "
        import sys
        sys.path.append('.')
        from app.models.game_models import *
        from app.main import app
        print('Backend models loaded successfully')
        "
        
    - name: Verify build artifacts
      run: |
        cd frontend && npm run build
        echo 'Frontend builds successfully'
        cd ../backend
        python -c "import app; print('Backend imports successfully')"