name: Deploy PR Environment
# This workflow deploys pull request environments for testing
# Triggers when PRs are opened, updated, or reopened against the main branch
# Creates a temporary environment named "pr-{PR_NUMBER}" for each pull request

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]  # Only for PRs targeting the main branch
  
env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  deploy-pr:
    # This job runs for pull requests only, not for pushes to main branch
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Check Azure secrets
      id: check-secrets
      run: |
        if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ] || [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
          echo "::warning::Azure secrets are not configured. Skipping PR deployment."
          echo "secrets-available=false" >> $GITHUB_OUTPUT
        else
          echo "secrets-available=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Checkout code
      if: steps.check-secrets.outputs.secrets-available == 'true'
      uses: actions/checkout@v4
      
    - name: Install Azure Developer CLI
      if: steps.check-secrets.outputs.secrets-available == 'true'
      uses: Azure/setup-azd@v1.0.0
      with:
        version: 'latest'
        
    - name: Setup Node.js for frontend build
      if: steps.check-secrets.outputs.secrets-available == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Setup Python for backend
      if: steps.check-secrets.outputs.secrets-available == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
      
    - name: Log in with Azure (Federated Credentials)
      if: steps.check-secrets.outputs.secrets-available == 'true' && env.AZURE_CLIENT_ID != ''
      run: |
        azd auth login \
          --client-id "${{ env.AZURE_CLIENT_ID }}" \
          --federated-credential-provider "github" \
          --tenant-id "${{ env.AZURE_TENANT_ID }}"
        
    - name: Log in with Azure (Service Principal)
      if: steps.check-secrets.outputs.secrets-available == 'true' && env.AZURE_CLIENT_ID == '' && env.AZURE_CREDENTIALS != ''
      uses: Azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Configure Azure Developer CLI environment
      if: steps.check-secrets.outputs.secrets-available == 'true'
      run: |
        # Create a unique environment name for this PR
        ENV_NAME="pr-${{ github.event.pull_request.number }}"
        echo "Environment name: $ENV_NAME"
        
        # Check if environment already exists, if not create it
        if ! azd env list | grep -q "$ENV_NAME"; then
          echo "Creating new environment: $ENV_NAME"
          azd env new $ENV_NAME --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" --location "${{ vars.AZURE_LOCATION || 'eastus' }}"
        else
          echo "Environment $ENV_NAME already exists, selecting it"
          azd env select $ENV_NAME
        fi
        
        # Set environment variables
        azd env set AZURE_LOCATION "${{ vars.AZURE_LOCATION || 'eastus' }}"
        azd env set AZURE_OPENAI_ENDPOINT "${{ secrets.AZURE_OPENAI_ENDPOINT }}"
        azd env set AZURE_OPENAI_API_KEY "${{ secrets.AZURE_OPENAI_API_KEY }}"
        azd env set AZURE_OPENAI_CHAT_DEPLOYMENT "${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT || 'gpt-4o-mini' }}"
        azd env set AZURE_OPENAI_EMBEDDING_DEPLOYMENT "${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT || 'text-embedding-ada-002' }}"
        azd env set AZURE_OPENAI_DALLE_DEPLOYMENT "${{ vars.AZURE_OPENAI_DALLE_DEPLOYMENT || 'dall-e-3' }}"
        
    - name: Deploy using Azure Developer CLI
      id: azd-deploy
      if: steps.check-secrets.outputs.secrets-available == 'true'
      run: |
        # Deploy the PR code to a temporary Azure environment for testing
        ENV_NAME="pr-${{ github.event.pull_request.number }}"
        echo "Deploying environment: $ENV_NAME"
        
        # Use azd up with verbose logging and timeout
        timeout 1800 azd up --no-prompt --debug || {
          echo "::warning::azd deployment failed, this may be due to resource conflicts or timeouts"
          echo "deployment-status=failed" >> $GITHUB_OUTPUT
          exit 1
        }
        
        echo "deployment-status=success" >> $GITHUB_OUTPUT
        
    - name: Alternative deployment via Azure Actions (if azd fails)
      id: alt-deploy
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.azd-deploy.outputs.deployment-status == 'failed'
      run: |
        echo "::warning::Falling back to alternative deployment method"
        echo "This would use direct Azure Resource Manager deployment actions"
        echo "deployment-status=skipped" >> $GITHUB_OUTPUT
      
    - name: Get deployment outputs
      id: azd-outputs
      if: steps.check-secrets.outputs.secrets-available == 'true' && (steps.azd-deploy.outputs.deployment-status == 'success' || steps.alt-deploy.outputs.deployment-status == 'success')
      run: |
        echo "Getting deployment outputs..."
        
        # Try to get outputs from azd
        if command -v azd >/dev/null 2>&1; then
          BACKEND_URI=$(azd env get-values 2>/dev/null | grep BACKEND_URI | cut -d'=' -f2 | tr -d '"' || echo "")
          FRONTEND_URI=$(azd env get-values 2>/dev/null | grep FRONTEND_URI | cut -d'=' -f2 | tr -d '"' || echo "")
          
          if [[ -n "$BACKEND_URI" ]]; then
            echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
          else
            echo "backend-uri=Not available" >> $GITHUB_OUTPUT
          fi
          
          if [[ -n "$FRONTEND_URI" ]]; then
            echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
          else
            echo "frontend-uri=Not available" >> $GITHUB_OUTPUT
          fi
        else
          echo "::warning::Unable to retrieve deployment outputs"
          echo "backend-uri=Deployment completed but URIs not available" >> $GITHUB_OUTPUT
          echo "frontend-uri=Deployment completed but URIs not available" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment on PR (Success)
      if: steps.check-secrets.outputs.secrets-available == 'true' && (steps.azd-deploy.outputs.deployment-status == 'success' || steps.alt-deploy.outputs.deployment-status == 'success')
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🚀 PR Environment Deployed
          
          Your pull request has been deployed to a temporary environment:
          
          - **Frontend**: ${{ steps.azd-outputs.outputs.frontend-uri }}
          - **Backend API**: ${{ steps.azd-outputs.outputs.backend-uri }}
          
          ### Test Your Changes
          Use the deployed environment to test your changes before merging.
          
          > **Note**: This environment will be automatically deleted when the PR is closed or merged.
        comment-author: 'github-actions[bot]'
        comment-author-association: 'NONE'
          
    - name: Comment on PR (Failure)
      if: steps.check-secrets.outputs.secrets-available == 'true' && (failure() || steps.azd-deploy.outputs.deployment-status == 'failed')
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## ❌ PR Environment Deployment Failed
          
          The deployment of your pull request environment failed. Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          
          ### Common Issues:
          - Azure resource provisioning errors
          - Configuration issues
          - Resource quotas exceeded
          - Azure CLI installation or authentication issues
          
          > **Note**: You can re-trigger the deployment by pushing new commits or re-running the workflow.
        comment-author: 'github-actions[bot]'
        comment-author-association: 'NONE'