---
name: Cleanup PR Environment
# This workflow cleans up pull request environments using Azure native actions
# Triggers when PRs are closed/merged against the main branch
# Deletes the temporary environment "pr-{PR_NUMBER}" for each pull request
# Uses Azure ARM deployment actions for reliable cleanup

on:
  pull_request:
    types: [closed]
    branches: [main]

# Required permissions for OIDC authentication with Azure
permissions:
  id-token: write   # Required for requesting OIDC JWT tokens
  contents: read    # Required for accessing repository content
  pull-requests: write  # Required for commenting on pull requests

jobs:
  cleanup-pr:
    runs-on: ubuntu-latest
    # Note: No environment specified to generate correct federated identity subject claim:
    # repo:SecuringTheRealm/str-agentic-adventures:pull_request

    steps:
    - name: Check Azure secrets
      id: check-secrets
      run: |
        # Check if we have federated credentials
        if [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ] && [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
          echo "secrets-available=true" >> $GITHUB_OUTPUT
          echo "use-federated-auth=true" >> $GITHUB_OUTPUT
          echo "use-service-principal=false" >> $GITHUB_OUTPUT
        # Check if we have service principal credentials
        elif [ -n "${{ secrets.AZURE_CREDENTIALS }}" ]; then
          echo "secrets-available=true" >> $GITHUB_OUTPUT
          echo "use-federated-auth=false" >> $GITHUB_OUTPUT
          echo "use-service-principal=true" >> $GITHUB_OUTPUT
        else
          echo "::warning::Azure secrets are not configured. Skipping PR cleanup."
          echo "secrets-available=false" >> $GITHUB_OUTPUT
          echo "use-federated-auth=false" >> $GITHUB_OUTPUT
          echo "use-service-principal=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout code
      if: steps.check-secrets.outputs.secrets-available == 'true'
      uses: actions/checkout@v4

    - name: Log in with Azure (Federated Credentials)
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.check-secrets.outputs.use-federated-auth == 'true'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in with Azure (Service Principal)
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.check-secrets.outputs.use-service-principal == 'true'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get environment information before cleanup
      id: get-env-info
      if: steps.check-secrets.outputs.secrets-available == 'true'
      run: |
        ENV_NAME="pr-${{ github.event.pull_request.number }}"
        RESOURCE_GROUP="str_agentic_pr_${{ github.event.pull_request.number }}"
        STACK_NAME="pr-${{ github.event.pull_request.number }}"

        echo "Checking for environment: $ENV_NAME"
        echo "Resource group: $RESOURCE_GROUP"
        echo "Deployment stack: $STACK_NAME"

        # Check if resource group exists
        if az group show --name "$RESOURCE_GROUP" >/dev/null 2>&1; then
          echo "environment-exists=true" >> $GITHUB_OUTPUT
          echo "resource-group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT

          # Try to get environment URLs before cleanup
          RESOURCE_TOKEN=$(echo "pr-${{ github.event.pull_request.number }}" | sha256sum | cut -c1-8)
          BACKEND_APP_NAME="pr-${{ github.event.pull_request.number }}-backend-$RESOURCE_TOKEN"
          FRONTEND_APP_NAME="pr-${{ github.event.pull_request.number }}-frontend-$RESOURCE_TOKEN"

          # Get backend URL if container app exists
          if az containerapp show --name "$BACKEND_APP_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
            BACKEND_FQDN=$(az containerapp show --name "$BACKEND_APP_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.configuration.ingress.fqdn" --output tsv 2>/dev/null || echo "")
            if [ -n "$BACKEND_FQDN" ]; then
              BACKEND_URI="https://$BACKEND_FQDN"
              echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
            fi
          fi

          # Get frontend URL if static web app exists
          if az staticwebapp show --name "$FRONTEND_APP_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
            FRONTEND_HOSTNAME=$(az staticwebapp show --name "$FRONTEND_APP_NAME" --resource-group "$RESOURCE_GROUP" --query "defaultHostname" --output tsv 2>/dev/null || echo "")
            if [ -n "$FRONTEND_HOSTNAME" ]; then
              FRONTEND_URI="https://$FRONTEND_HOSTNAME"
              echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "environment-exists=false" >> $GITHUB_OUTPUT
          echo "Resource group $RESOURCE_GROUP not found"
        fi

    - name: Cleanup PR Environment (Delete Deployment Stack)
      id: cleanup-stack
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.get-env-info.outputs.environment-exists == 'true'
      uses: azure/bicep-deploy@v2
      with:
        type: deploymentStack
        operation: delete
        name: ${{ steps.get-env-info.outputs.stack-name }}
        location: ${{ vars.AZURE_LOCATION || vars.AZURE_REGION || 'eastus2' }}
        scope: subscription
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        action-on-unmanage-resources: delete
      continue-on-error: true

    - name: Set cleanup status
      id: set-cleanup-status
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.get-env-info.outputs.environment-exists == 'true'
      run: |
        if [ "${{ steps.cleanup-stack.outcome }}" == "success" ]; then
          echo "cleanup-status=success" >> $GITHUB_OUTPUT
          echo "Environment cleanup completed successfully"
        else
          echo "cleanup-status=failed" >> $GITHUB_OUTPUT
          echo "Environment cleanup failed, but continuing"
        fi

    - name: Comment on PR (Success with URLs)
      if: steps.check-secrets.outputs.secrets-available == 'true' && steps.get-env-info.outputs.environment-exists == 'true' && (steps.get-env-info.outputs.backend-uri != '' || steps.get-env-info.outputs.frontend-uri != '')
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🧹 PR Environment Cleaned Up

          The temporary environment for this pull request has been deleted.

          ### Environment URLs (now deleted):
          - **Frontend**: ${{ steps.get-env-info.outputs.frontend-uri || 'Not available' }}
          - **Backend API**: ${{ steps.get-env-info.outputs.backend-uri || 'Not available' }}

          ${{ github.event.pull_request.merged && '✅ **Merged**: Changes are now available in the main branch' || '❌ **Closed**: No changes were merged' }}

    - name: Comment on PR (Success without URLs)
      if: steps.check-secrets.outputs.secrets-available == 'true' && (steps.get-env-info.outputs.environment-exists == 'false' || (steps.get-env-info.outputs.backend-uri == '' && steps.get-env-info.outputs.frontend-uri == ''))
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🧹 PR Environment Cleaned Up

          The temporary environment for this pull request has been deleted.

          ${{ github.event.pull_request.merged && '✅ **Merged**: Changes are now available in the main branch' || '❌ **Closed**: No changes were merged' }}

          > **Note**: No deployment URLs were found for this PR environment.
