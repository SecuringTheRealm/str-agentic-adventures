---
name: Deploy Environment (Reusable)
# Reusable workflow for deploying both production and PR environments
# Reduces code duplication and ensures consistency

on:
  workflow_call:
    inputs:
      environment-name:
        description: "Environment name (production or pr-{number})"
        required: true
        type: string
      resource-group-name:
        description: "Resource group name"
        required: true
        type: string
      location:
        description: "Azure region"
        required: true
        type: string
      stack-name:
        description: "Deployment stack name"
        required: true
        type: string
      container-app-name:
        description: "Container app name"
        required: true
        type: string
      frontend-build-path:
        description: "Frontend build path"
        required: false
        type: string
        default: "frontend/build"
      is-production:
        description: "Whether this is a production deployment"
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_CLIENT_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_CREDENTIALS:
        required: false
      AZURE_OPENAI_ENDPOINT:
        required: true
      AZURE_OPENAI_API_KEY:
        required: true
    outputs:
      backend-uri:
        description: "Backend URI"
        value: ${{ jobs.deploy.outputs.backend-uri }}
      frontend-uri:
        description: "Frontend URI"
        value: ${{ jobs.deploy.outputs.frontend-uri }}
      deployment-status:
        description: "Overall deployment status"
        value: ${{ jobs.deploy.outputs.deployment-status }}

# Required permissions for OIDC authentication with Azure
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      backend-uri: ${{ steps.deployment-outputs.outputs.backend-uri }}
      frontend-uri: ${{ steps.deployment-outputs.outputs.frontend-uri }}
      deployment-status: ${{ steps.deployment-outputs.outputs.deployment-status }}

    steps:
      - name: Check Azure secrets
        id: check-secrets
        run: |
          # Check if we have federated credentials
          if [ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && [ -n "${{ secrets.AZURE_TENANT_ID }}" ] && [ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "secrets-available=true" >> $GITHUB_OUTPUT
            echo "use-federated-auth=true" >> $GITHUB_OUTPUT
            echo "use-service-principal=false" >> $GITHUB_OUTPUT
          # Check if we have service principal credentials
          elif [ -n "${{ secrets.AZURE_CREDENTIALS }}" ]; then
            echo "secrets-available=true" >> $GITHUB_OUTPUT
            echo "use-federated-auth=false" >> $GITHUB_OUTPUT
            echo "use-service-principal=true" >> $GITHUB_OUTPUT
          else
            echo "::error::Azure secrets are not configured. Deployment requires Azure credentials."
            echo "secrets-available=false" >> $GITHUB_OUTPUT
            echo "use-federated-auth=false" >> $GITHUB_OUTPUT
            echo "use-service-principal=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python for backend
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/home/runner/.local/bin:$PATH"
          echo "/home/runner/.local/bin" >> $GITHUB_PATH

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Log in with Azure (Federated Credentials)
        if: steps.check-secrets.outputs.use-federated-auth == 'true'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in with Azure (Service Principal)
        if: steps.check-secrets.outputs.use-service-principal == 'true'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Cleanup existing deployment stack (if exists)
        id: cleanup-stack
        run: |
          STACK_NAME="${{ inputs.stack-name }}"
          LOCATION="${{ inputs.location }}"

          echo "Checking for existing deployment stack: $STACK_NAME"

          # Check if stack exists and delete it to ensure clean deployment
          if az stack show --name "$STACK_NAME" --location "$LOCATION" --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" >/dev/null 2>&1; then
            echo "Found existing deployment stack $STACK_NAME, deleting..."
            az stack delete --name "$STACK_NAME" --location "$LOCATION" --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --yes --no-wait
            echo "Deletion initiated for stack $STACK_NAME"

            # Wait a bit for deletion to start
            sleep 30

            # Wait for deletion to complete (with timeout)
            TIMEOUT=300  # 5 minutes
            ELAPSED=0
            while az stack show --name "$STACK_NAME" --location "$LOCATION" --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" >/dev/null 2>&1; do
              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "::warning::Timeout waiting for stack deletion. Proceeding with deployment..."
                break
              fi
              echo "Waiting for stack deletion to complete... ($ELAPSED/$TIMEOUT seconds)"
              sleep 15
              ELAPSED=$((ELAPSED + 15))
            done

            echo "Stack cleanup completed"
          else
            echo "No existing deployment stack found"
          fi
        timeout-minutes: 8

      - name: Deploy Infrastructure with Bicep (Deployment Stack)
        id: infrastructure-deploy
        uses: azure/bicep-deploy@v2
        with:
          type: deploymentStack
          operation: create
          name: ${{ inputs.stack-name }}
          location: ${{ inputs.location }}
          scope: subscription
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template-file: infra/main.bicep
          parameters: |
            {
              "environmentName": "${{ inputs.environment-name }}",
              "location": "${{ inputs.location }}",
              "resourceGroupName": "${{ inputs.resource-group-name }}",
              "azureOpenAiEndpoint": "${{ secrets.AZURE_OPENAI_ENDPOINT }}",
              "azureOpenAiApiKey": "${{ secrets.AZURE_OPENAI_API_KEY }}",
              "azureOpenAiChatDeployment": "${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT || 'gpt-4o-mini' }}",
              "azureOpenAiEmbeddingDeployment": "${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT || 'text-embedding-ada-002' }}",
              "azureOpenAiDalleDeployment": "${{ vars.AZURE_OPENAI_DALLE_DEPLOYMENT || 'dall-e-3' }}"
            }
          action-on-unmanage-resources: delete
          action-on-unmanage-resourcegroups: delete
          deny-settings-mode: none
        timeout-minutes: 20

      - name: Build and deploy backend container
        id: backend-deploy
        if: steps.infrastructure-deploy.outcome == 'success'
        run: |
          # Get deployment outputs from the infrastructure deployment
          RESOURCE_GROUP="${{ steps.infrastructure-deploy.outputs.AZURE_RESOURCE_GROUP }}"
          CONTAINER_APP_ENVIRONMENT="${{ steps.infrastructure-deploy.outputs.AZURE_CONTAINER_APPS_ENVIRONMENT_ID }}"
          STORAGE_ACCOUNT_NAME="${{ steps.infrastructure-deploy.outputs.AZURE_STORAGE_ACCOUNT_NAME }}"
          CONTAINER_APP_NAME="${{ inputs.container-app-name }}"

          # For PR environments, add a unique suffix to avoid conflicts
          if [[ "${{ inputs.environment-name }}" == pr-* ]]; then
            RESOURCE_TOKEN=$(echo "${{ inputs.environment-name }}" | sha256sum | cut -c1-8)
            CONTAINER_APP_NAME="${{ inputs.container-app-name }}-$RESOURCE_TOKEN"
          fi

          echo "Deploying backend container app: $CONTAINER_APP_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Container Apps Environment: $CONTAINER_APP_ENVIRONMENT"
          echo "Storage Account: $STORAGE_ACCOUNT_NAME"

          # Get storage connection string
          STORAGE_CONNECTION_STRING=$(az storage account show-connection-string --name "$STORAGE_ACCOUNT_NAME" --resource-group "$RESOURCE_GROUP" --query "connectionString" --output tsv)

          # Use root directory to access Dockerfile and UV dependencies

          # Create or update the container app with Docker build
          az containerapp up \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --environment "$CONTAINER_APP_ENVIRONMENT" \
            --source . \
            --target-port 8000 \
            --ingress external \
            --env-vars \
              "AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              "AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}" \
              "AZURE_OPENAI_API_VERSION=2023-12-01-preview" \
              "AZURE_OPENAI_CHAT_DEPLOYMENT=${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT || 'gpt-4o-mini' }}" \
              "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT || 'text-embedding-ada-002' }}" \
              "AZURE_OPENAI_DALLE_DEPLOYMENT=${{ vars.AZURE_OPENAI_DALLE_DEPLOYMENT || 'dall-e-3' }}" \
              "STORAGE_CONNECTION_STRING=$STORAGE_CONNECTION_STRING" \
              "APP_HOST=0.0.0.0" \
              "APP_PORT=8000" \
              "APP_DEBUG=false" \
              "APP_LOG_LEVEL=info"

          # Get the FQDN of the deployed container app
          BACKEND_FQDN=$(az containerapp show --name "$CONTAINER_APP_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.configuration.ingress.fqdn" --output tsv)
          BACKEND_URI="https://$BACKEND_FQDN"

          echo "Backend deployed to: $BACKEND_URI"
          echo "backend-status=success" >> $GITHUB_OUTPUT
          echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
          echo "container-app-name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
        timeout-minutes: 15

      - name: Build frontend for Static Web App
        id: frontend-build
        if: steps.infrastructure-deploy.outcome == 'success' && steps.backend-deploy.outputs.backend-status == 'success'
        run: |
          # Get Static Web App details
          RESOURCE_GROUP="${{ steps.infrastructure-deploy.outputs.AZURE_RESOURCE_GROUP }}"

          # Query for the actual Static Web App name (Azure adds unique suffix)
          # The Bicep output name doesn't include the Azure-generated suffix
          EXPECTED_SWA_PREFIX="${{ steps.infrastructure-deploy.outputs.AZURE_STATIC_WEB_APP_NAME }}"

          echo "Looking for Static Web App with prefix: $EXPECTED_SWA_PREFIX"
          echo "Resource Group: $RESOURCE_GROUP"

          # Find the actual Static Web App name in the resource group
          SWA_NAME=$(az staticwebapp list --resource-group "$RESOURCE_GROUP" --query "[?starts_with(name, '$EXPECTED_SWA_PREFIX')].name | [0]" --output tsv)

          if [ -z "$SWA_NAME" ] || [ "$SWA_NAME" = "null" ]; then
            echo "::warning::No Static Web App found with prefix $EXPECTED_SWA_PREFIX in resource group $RESOURCE_GROUP"
            echo "Available Static Web Apps in resource group:"
            az staticwebapp list --resource-group "$RESOURCE_GROUP" --query "[].name" --output table || echo "None found"
            SWA_NAME="$EXPECTED_SWA_PREFIX"  # Fallback to original name
          fi

          echo "Using Static Web App name: $SWA_NAME"

          # Build frontend with backend URL
          cd frontend
          npm ci

          # Set backend URL for build
          export REACT_APP_API_URL="${{ steps.backend-deploy.outputs.backend-uri }}"
          npm run build

          # Get deployment token from the Static Web App (if it exists)
          if az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
            DEPLOYMENT_TOKEN=$(az staticwebapp secrets list --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "properties.apiKey" --output tsv 2>/dev/null || echo "")
            SWA_DEFAULT_HOSTNAME=$(az staticwebapp show --name "$SWA_NAME" --resource-group "$RESOURCE_GROUP" --query "defaultHostname" --output tsv)
            FRONTEND_URI="https://$SWA_DEFAULT_HOSTNAME"
            echo "Successfully found Static Web App: $SWA_NAME"
            echo "Frontend URI: $FRONTEND_URI"
          else
            echo "::warning::Static Web App $SWA_NAME not found in resource group $RESOURCE_GROUP"
            DEPLOYMENT_TOKEN=""
            FRONTEND_URI="${{ steps.infrastructure-deploy.outputs.FRONTEND_URI || 'Static Web App not available' }}"
          fi

          if [ -z "$DEPLOYMENT_TOKEN" ]; then
            echo "::warning::Could not retrieve deployment token for Static Web App $SWA_NAME"
            echo "frontend-status=token-failed" >> $GITHUB_OUTPUT
            echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
          else
            echo "frontend-status=success" >> $GITHUB_OUTPUT
            echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT
            echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
          fi
        timeout-minutes: 10

      - name: Deploy frontend using Static Web Apps action
        if: steps.frontend-build.outputs.frontend-status == 'success'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.frontend-build.outputs.deployment-token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ inputs.frontend-build-path }}
          skip_app_build: true
          output_location: ""

      - name: Get deployment outputs
        id: deployment-outputs
        if: steps.infrastructure-deploy.outcome == 'success'
        run: |
          echo "Getting deployment outputs..."

          # Use outputs from backend and frontend deployments
          BACKEND_URI="${{ steps.backend-deploy.outputs.backend-uri || 'Backend deployment in progress' }}"
          FRONTEND_URI="${{ steps.frontend-build.outputs.static_web_app_url || steps.frontend-build.outputs.frontend-uri || steps.infrastructure-deploy.outputs.FRONTEND_URI || 'Frontend deployment in progress' }}"

          # Determine overall deployment status
          if [ "${{ steps.backend-deploy.outputs.backend-status }}" == "success" ] && [ "${{ steps.frontend-build.outputs.frontend-status }}" == "success" ]; then
            DEPLOYMENT_STATUS="success"
          elif [ "${{ steps.backend-deploy.outputs.backend-status }}" == "success" ]; then
            DEPLOYMENT_STATUS="partial"
          else
            DEPLOYMENT_STATUS="failed"
          fi

          echo "backend-uri=$BACKEND_URI" >> $GITHUB_OUTPUT
          echo "frontend-uri=$FRONTEND_URI" >> $GITHUB_OUTPUT
          echo "deployment-status=$DEPLOYMENT_STATUS" >> $GITHUB_OUTPUT

          echo "Backend URI: $BACKEND_URI"
          echo "Frontend URI: $FRONTEND_URI"
          echo "Deployment Status: $DEPLOYMENT_STATUS"
