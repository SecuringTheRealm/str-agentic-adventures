[1mdiff --git a/backend/app/agents/scribe_agent.py b/backend/app/agents/scribe_agent.py[m
[1mindex 678bf9c..60c6b99 100644[m
[1m--- a/backend/app/agents/scribe_agent.py[m
[1m+++ b/backend/app/agents/scribe_agent.py[m
[36m@@ -99,6 +99,7 @@[m [mclass ScribeAgent:[m
                 "proficiency_bonus": 2,[m
                 "ability_score_improvements_used": 0,[m
                 "inventory": [],[m
[32m+[m[32m                "equipped_items": {},[m
             }[m
 [m
             # Set hit dice based on class[m
[36m@@ -406,6 +407,115 @@[m [mclass ScribeAgent:[m
             logger.error(f"Error awarding experience: {str(e)}")[m
             return {"error": f"Failed to award experience: {str(e)}"}[m
 [m
[32m+[m[32m    async def equip_item([m
[32m+[m[32m        self, character_id: str, item_id: str, action: str, equipment_slot: str = None[m
[32m+[m[32m    ) -> Dict[str, Any]:[m
[32m+[m[32m        """[m
[32m+[m[32m        Equip or unequip an item for a character with stat effects.[m
[32m+[m
[32m+[m[32m        Args:[m
[32m+[m[32m            character_id: The ID of the character[m
[32m+[m[32m            item_id: The ID of the item to equip/unequip[m
[32m+[m[32m            action: "equip" or "unequip"[m
[32m+[m[32m            equipment_slot: The equipment slot (optional for auto-detection)[m
[32m+[m
[32m+[m[32m        Returns:[m
[32m+[m[32m            Dict[str, Any]: The result of the equipment operation[m
[32m+[m[32m        """[m
[32m+[m[32m        try:[m
[32m+[m[32m            with next(get_session()) as db:[m
[32m+[m[32m                db_character = db.get(Character, character_id)[m
[32m+[m[32m                if not db_character:[m
[32m+[m[32m                    return {"error": f"Character {character_id} not found"}[m
[32m+[m[32m                character = db_character.data[m
[32m+[m[41m                [m
[32m+[m[32m                inventory = character.get("inventory", [])[m
[32m+[m[32m                equipped_items = character.get("equipped_items", {})[m
[32m+[m[41m                [m
[32m+[m[32m                # Find the item in inventory[m
[32m+[m[32m                item = None[m
[32m+[m[32m                for inv_item in inventory:[m
[32m+[m[32m                    if inv_item.get("id") == item_id:[m
[32m+[m[32m                        item = inv_item[m
[32m+[m[32m                        break[m
[32m+[m[41m                [m
[32m+[m[32m                if not item:[m
[32m+[m[32m                    return {"error": f"Item {item_id} not found in inventory"}[m
[32m+[m[41m                [m
[32m+[m[32m                if action == "equip":[m
[32m+[m[32m                    # Determine equipment slot if not provided[m
[32m+[m[32m                    if not equipment_slot:[m
[32m+[m[32m                        equipment_slot = item.get("equipment_type")[m
[32m+[m[32m                        if not equipment_slot:[m
[32m+[m[32m                            return {"error": "Item is not equippable (no equipment_type)"}[m
[32m+[m[41m                    [m
[32m+[m[32m                    # Check if slot is already occupied[m
[32m+[m[32m                    if equipment_slot in equipped_items:[m
[32m+[m[32m                        return {"error": f"Equipment slot '{equipment_slot}' is already occupied"}[m
[32m+[m[41m                    [m
[32m+[m[32m                    # Equip the item[m
[32m+[m[32m                    equipped_items[equipment_slot] = item[m
[32m+[m[32m                    character["equipped_items"] = equipped_items[m
[32m+[m[41m                    [m
[32m+[m[32m                    # Apply stat effects[m
[32m+[m[32m                    stat_effects = item.get("stat_effects", {})[m
[32m+[m[32m                    for stat, value in stat_effects.items():[m
[32m+[m[32m                        if stat == "armor_class":[m
[32m+[m[32m                            character["armor_class"] = character.get("armor_class", 10) + value[m
[32m+[m[32m                        elif stat in ["strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma"]:[m
[32m+[m[32m                            abilities = character.get("abilities", {})[m
[32m+[m[32m                            abilities[stat] = abilities.get(stat, 10) + value[m
[32m+[m[32m                            character["abilities"] = abilities[m
[32m+[m[41m                    [m
[32m+[m[32m                    result_message = f"Equipped {item['name']} in {equipment_slot} slot"[m
[32m+[m[41m                    [m
[32m+[m[32m                elif action == "unequip":[m
[32m+[m[32m                    # Find which slot the item is in[m
[32m+[m[32m                    slot_to_unequip = None[m
[32m+[m[32m                    for slot, equipped_item in equipped_items.items():[m
[32m+[m[32m                        if equipped_item.get("id") == item_id:[m
[32m+[m[32m                            slot_to_unequip = slot[m
[32m+[m[32m                            break[m
[32m+[m[41m                    [m
[32m+[m[32m                    if not slot_to_unequip:[m
[32m+[m[32m                        return {"error": f"Item {item_id} is not currently equipped"}[m
[32m+[m[41m                    [m
[32m+[m[32m                    # Remove stat effects[m
[32m+[m[32m                    stat_effects = item.get("stat_effects", {})[m
[32m+[m[32m                    for stat, value in stat_effects.items():[m
[32m+[m[32m                        if stat == "armor_class":[m
[32m+[m[32m                            character["armor_class"] = character.get("armor_class", 10) - value[m
[32m+[m[32m                        elif stat in ["strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma"]:[m
[32m+[m[32m                            abilities = character.get("abilities", {})[m
[32m+[m[32m                            abilities[stat] = abilities.get(stat, 10) - value[m
[32m+[m[32m                            character["abilities"] = abilities[m
[32m+[m[41m                    [m
[32m+[m[32m                    # Unequip the item[m
[32m+[m[32m                    del equipped_items[slot_to_unequip][m
[32m+[m[32m                    character["equipped_items"] = equipped_items[m
[32m+[m[41m                    [m
[32m+[m[32m                    result_message = f"Unequipped {item['name']} from {slot_to_unequip} slot"[m
[32m+[m[32m                else:[m
[32m+[m[32m                    return {"error": f"Invalid action: {action}. Must be 'equip' or 'unequip'"}[m
[32m+[m[41m                [m
[32m+[m[32m                # Save changes[m
[32m+[m[32m                db_character.data = character[m
[32m+[m[32m                db.commit()[m
[32m+[m[41m                [m
[32m+[m[32m                return {[m
[32m+[m[32m                    "success": True,[m
[32m+[m[32m                    "message": result_message,[m
[32m+[m[32m                    "equipped_items": equipped_items,[m
[32m+[m[32m                    "character_stats": {[m
[32m+[m[32m                        "armor_class": character.get("armor_class"),[m
[32m+[m[32m                        "abilities": character.get("abilities")[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[41m                [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logger.error(f"Error managing equipment: {str(e)}")[m
[32m+[m[32m            return {"error": f"Failed to {action} item: {str(e)}"}[m
[32m+[m
 [m
 # Lazy singleton instance[m
 _scribe = None[m
[1mdiff --git a/backend/app/api/game_routes.py b/backend/app/api/game_routes.py[m
[1mindex e52f703..ba4a3bd 100644[m
[1m--- a/backend/app/api/game_routes.py[m
[1m+++ b/backend/app/api/game_routes.py[m
[36m@@ -12,6 +12,7 @@[m [mfrom app.models.game_models import ([m
     GameResponse,[m
     CharacterSheet,[m
     LevelUpRequest,[m
[32m+[m[32m    EquipmentRequest,[m
 )[m
 from app.agents.dungeon_master_agent import get_dungeon_master[m
 from app.agents.scribe_agent import get_scribe[m
[36m@@ -854,8 +855,34 @@[m [masync def process_general_action([m
 # TODO: POST /spells/attack-bonus - Calculate spell attack bonus for a character[m
 # TODO: POST /character/{character_id}/concentration - Manage spell concentration tracking[m
 [m
[32m+[m[32m# Equipment management endpoint[m
[32m+[m[32m@router.post("/character/{character_id}/equipment", response_model=Dict[str, Any])[m
[32m+[m[32masync def manage_equipment(character_id: str, equipment_data: EquipmentRequest):[m
[32m+[m[32m    """Equip or unequip items with stat effects."""[m
[32m+[m[32m    try:[m
[32m+[m[32m        # Manage equipment via Scribe agent[m
[32m+[m[32m        result = await get_scribe().equip_item([m
[32m+[m[32m            character_id,[m
[32m+[m[32m            equipment_data.item_id,[m
[32m+[m[32m            equipment_data.action,[m
[32m+[m[32m            equipment_data.equipment_slot,[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        if "error" in result:[m
[32m+[m[32m            raise HTTPException([m
[32m+[m[32m                status_code=status.HTTP_400_BAD_REQUEST, detail=result["error"][m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        return result[m
[32m+[m[32m    except HTTPException:[m
[32m+[m[32m        raise[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        raise HTTPException([m
[32m+[m[32m            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,[m
[32m+[m[32m            detail=f"Failed to manage equipment: {str(e)}",[m
[32m+[m[32m        )[m
[32m+[m
 # TODO: Add advanced inventory system API endpoints[m
[31m-# TODO: POST /character/{character_id}/equipment - Equip/unequip items with stat effects[m
 # TODO: GET /character/{character_id}/encumbrance - Calculate carrying capacity and weight[m
 # TODO: POST /items/magical-effects - Apply magical item effects to character stats[m
 # TODO: GET /items/catalog - Browse available items with rarity and value information[m
[1mdiff --git a/backend/app/models/game_models.py b/backend/app/models/game_models.py[m
[1mindex de104a6..0063a1d 100644[m
[1m--- a/backend/app/models/game_models.py[m
[1m+++ b/backend/app/models/game_models.py[m
[36m@@ -67,6 +67,8 @@[m [mclass Item(BaseModel):[m
     weight: Optional[float] = None[m
     value: Optional[int] = None[m
     properties: Optional[Dict[str, Any]] = None[m
[32m+[m[32m    equipment_type: Optional[str] = None  # "armor", "weapon", "shield", "accessory", etc.[m
[32m+[m[32m    stat_effects: Optional[Dict[str, int]] = None  # {"armor_class": 2, "strength": 1}[m
 [m
 class Spell(BaseModel):[m
     id: str = Field(default_factory=lambda: str(uuid.uuid4()))[m
[36m@@ -95,6 +97,7 @@[m [mclass CharacterSheet(BaseModel):[m
     proficiency_bonus: int = 2[m
     skills: Dict[str, bool] = {}[m
     inventory: List[Item] = [][m
[32m+[m[32m    equipped_items: Dict[str, Item] = {}  # Equipment slot -> Item mapping[m
     spells: List[Spell] = [][m
     features: List[Dict[str, Any]] = [][m
     backstory: Optional[str] = None[m
[36m@@ -168,6 +171,11 @@[m [mclass LevelUpResponse(BaseModel):[m
     features_gained: List[str][m
     message: str[m
 [m
[32m+[m[32mclass EquipmentRequest(BaseModel):[m
[32m+[m[32m    item_id: str[m
[32m+[m[32m    action: str  # "equip" or "unequip"[m
[32m+[m[32m    equipment_slot: Optional[str] = None  # "armor", "main_hand", "off_hand", "shield", etc.[m
[32m+[m
 class PlayerInput(BaseModel):[m
     message: str[m
     character_id: str[m
[1mdiff --git a/backend/tests/test_equipment.py b/backend/tests/test_equipment.py[m
[1mnew file mode 100644[m
[1mindex 0000000..89ef211[m
[1m--- /dev/null[m
[1m+++ b/backend/tests/test_equipment.py[m
[36m@@ -0,0 +1,123 @@[m
[32m+[m[32m"""[m
[32m+[m[32mTest equipment system functionality.[m
[32m+[m[32m"""[m
[32m+[m[32mimport pytest[m
[32m+[m[32mfrom app.models.game_models import Item, CharacterSheet, EquipmentRequest, Abilities, HitPoints[m
[32m+[m
[32m+[m
[32m+[m[32mclass TestEquipmentModels:[m
[32m+[m[32m    """Test equipment-related models."""[m
[32m+[m
[32m+[m[32m    def test_item_with_equipment_type(self):[m
[32m+[m[32m        """Test Item model with equipment type and stat effects."""[m
[32m+[m[32m        item = Item([m
[32m+[m[32m            name="Magic Sword",[m
[32m+[m[32m            description="A sword that grants strength",[m
[32m+[m[32m            equipment_type="weapon",[m
[32m+[m[32m            stat_effects={"strength": 2, "armor_class": 1}[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert item.name == "Magic Sword"[m
[32m+[m[32m        assert item.equipment_type == "weapon"[m
[32m+[m[32m        assert item.stat_effects == {"strength": 2, "armor_class": 1}[m
[32m+[m
[32m+[m[32m    def test_item_without_equipment_type(self):[m
[32m+[m[32m        """Test Item model without equipment type (regular item)."""[m
[32m+[m[32m        item = Item(name="Health Potion")[m
[32m+[m[41m        [m
[32m+[m[32m        assert item.name == "Health Potion"[m
[32m+[m[32m        assert item.equipment_type is None[m
[32m+[m[32m        assert item.stat_effects is None[m
[32m+[m
[32m+[m[32m    def test_character_sheet_with_equipped_items(self):[m
[32m+[m[32m        """Test CharacterSheet with equipped items."""[m
[32m+[m[32m        sword = Item([m
[32m+[m[32m            name="Magic Sword",[m
[32m+[m[32m            equipment_type="weapon",[m
[32m+[m[32m            stat_effects={"strength": 2}[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        character = CharacterSheet([m
[32m+[m[32m            name="Test Hero",[m
[32m+[m[32m            race="human",[m
[32m+[m[32m            character_class="fighter",[m
[32m+[m[32m            abilities=Abilities(),[m
[32m+[m[32m            hit_points=HitPoints(current=10, maximum=10),[m
[32m+[m[32m            equipped_items={"main_hand": sword}[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert character.name == "Test Hero"[m
[32m+[m[32m        assert "main_hand" in character.equipped_items[m
[32m+[m[32m        assert character.equipped_items["main_hand"].name == "Magic Sword"[m
[32m+[m
[32m+[m[32m    def test_equipment_request_equip(self):[m
[32m+[m[32m        """Test EquipmentRequest for equipping items."""[m
[32m+[m[32m        request = EquipmentRequest([m
[32m+[m[32m            item_id="sword-123",[m
[32m+[m[32m            action="equip",[m
[32m+[m[32m            equipment_slot="main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert request.item_id == "sword-123"[m
[32m+[m[32m        assert request.action == "equip"[m
[32m+[m[32m        assert request.equipment_slot == "main_hand"[m
[32m+[m
[32m+[m[32m    def test_equipment_request_unequip(self):[m
[32m+[m[32m        """Test EquipmentRequest for unequipping items."""[m
[32m+[m[32m        request = EquipmentRequest([m
[32m+[m[32m            item_id="armor-456",[m
[32m+[m[32m            action="unequip"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert request.item_id == "armor-456"[m
[32m+[m[32m        assert request.action == "unequip"[m
[32m+[m[32m        assert request.equipment_slot is None[m
[32m+[m
[32m+[m
[32m+[m[32mclass TestEquipmentFunctionality:[m
[32m+[m[32m    """Test equipment system functionality."""[m
[32m+[m
[32m+[m[32m    def test_stat_effects_application(self):[m
[32m+[m[32m        """Test that stat effects are properly applied to character stats."""[m
[32m+[m[32m        # This would test the actual functionality when integrated[m
[32m+[m[32m        # For now, just verify the data structures support the functionality[m
[32m+[m[41m        [m
[32m+[m[32m        sword = Item([m
[32m+[m[32m            name="Strength Sword",[m
[32m+[m[32m            equipment_type="weapon",[m
[32m+[m[32m            stat_effects={"strength": 3, "armor_class": 1}[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        armor = Item([m
[32m+[m[32m            name="Plate Armor",[m
[32m+[m[32m            equipment_type="armor",[m
[32m+[m[32m            stat_effects={"armor_class": 5, "dexterity": -1}[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        # Test that items have proper stat effects[m
[32m+[m[32m        assert sword.stat_effects["strength"] == 3[m
[32m+[m[32m        assert sword.stat_effects["armor_class"] == 1[m
[32m+[m[32m        assert armor.stat_effects["armor_class"] == 5[m
[32m+[m[32m        assert armor.stat_effects["dexterity"] == -1[m
[32m+[m
[32m+[m[32m    def test_equipment_slot_mapping(self):[m
[32m+[m[32m        """Test equipment slot mapping functionality."""[m
[32m+[m[32m        equipped_items = {[m
[32m+[m[32m            "main_hand": Item(name="Sword", equipment_type="weapon"),[m
[32m+[m[32m            "armor": Item(name="Plate Mail", equipment_type="armor"),[m
[32m+[m[32m            "off_hand": Item(name="Shield", equipment_type="shield")[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        character = CharacterSheet([m
[32m+[m[32m            name="Warrior",[m
[32m+[m[32m            race="human",[m
[32m+[m[32m            character_class="fighter",[m
[32m+[m[32m            abilities=Abilities(),[m
[32m+[m[32m            hit_points=HitPoints(current=20, maximum=20),[m
[32m+[m[32m            equipped_items=equipped_items[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert len(character.equipped_items) == 3[m
[32m+[m[32m        assert character.equipped_items["main_hand"].name == "Sword"[m
[32m+[m[32m        assert character.equipped_items["armor"].name == "Plate Mail"[m
[32m+[m[32m        assert character.equipped_items["off_hand"].name == "Shield"[m
\ No newline at end of file[m
[1mdiff --git a/backend/tests/test_equipment_integration.py b/backend/tests/test_equipment_integration.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1d032ec[m
[1m--- /dev/null[m
[1m+++ b/backend/tests/test_equipment_integration.py[m
[36m@@ -0,0 +1,184 @@[m
[32m+[m[32m"""[m
[32m+[m[32mIntegration tests for the equipment system.[m
[32m+[m[32m"""[m
[32m+[m[32mimport pytest[m
[32m+[m[32mimport asyncio[m
[32m+[m[32mfrom app.agents.scribe_agent import ScribeAgent[m
[32m+[m[32mfrom app.models.game_models import Item[m
[32m+[m
[32m+[m
[32m+[m[32mclass TestEquipmentIntegration:[m
[32m+[m[32m    """Test equipment system integration."""[m
[32m+[m[41m    [m
[32m+[m[32m    @pytest.fixture[m
[32m+[m[32m    async def scribe_agent(self):[m
[32m+[m[32m        """Create a test ScribeAgent instance."""[m
[32m+[m[32m        return ScribeAgent()[m
[32m+[m[41m    [m
[32m+[m[32m    @pytest.fixture[m
[32m+[m[32m    async def test_character(self, scribe_agent):[m
[32m+[m[32m        """Create a test character."""[m
[32m+[m[32m        character_data = {[m
[32m+[m[32m            "name": "Test Warrior",[m
[32m+[m[32m            "race": "human",[m
[32m+[m[32m            "class": "fighter",[m
[32m+[m[32m            "strength": 15,[m
[32m+[m[32m            "dexterity": 12,[m
[32m+[m[32m            "constitution": 14,[m
[32m+[m[32m            "intelligence": 10,[m
[32m+[m[32m            "wisdom": 13,[m
[32m+[m[32m            "charisma": 8,[m
[32m+[m[32m            "hitPoints": 12[m
[32m+[m[32m        }[m
[32m+[m[32m        character = await scribe_agent.create_character(character_data)[m
[32m+[m[32m        return character[m
[32m+[m
[32m+[m[32m    @pytest.fixture[m
[32m+[m[32m    async def magic_sword(self, scribe_agent, test_character):[m
[32m+[m[32m        """Add a magic sword to character inventory."""[m
[32m+[m[32m        sword = {[m
[32m+[m[32m            "id": "magic-sword-123",[m
[32m+[m[32m            "name": "Magic Longsword",[m
[32m+[m[32m            "description": "A sword that enhances the wielder's strength and protection",[m
[32m+[m[32m            "equipment_type": "weapon",[m
[32m+[m[32m            "stat_effects": {[m
[32m+[m[32m                "strength": 2,[m
[32m+[m[32m                "armor_class": 1[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        await scribe_agent.add_to_inventory(test_character["id"], sword)[m
[32m+[m[32m        return sword[m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_equip_item_success(self, scribe_agent, test_character, magic_sword):[m
[32m+[m[32m        """Test successfully equipping an item."""[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "equip",[m
[32m+[m[32m            "main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert result["success"] is True[m
[32m+[m[32m        assert "Equipped Magic Longsword" in result["message"][m
[32m+[m[32m        assert "main_hand" in result["equipped_items"][m
[32m+[m[32m        assert result["equipped_items"]["main_hand"]["name"] == "Magic Longsword"[m
[32m+[m[41m        [m
[32m+[m[32m        # Check stat effects were applied[m
[32m+[m[32m        assert result["character_stats"]["armor_class"] == 11  # 10 base + 1 from sword[m
[32m+[m[32m        assert result["character_stats"]["abilities"]["strength"] == 17  # 15 base + 2 from sword[m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_unequip_item_success(self, scribe_agent, test_character, magic_sword):[m
[32m+[m[32m        """Test successfully unequipping an item."""[m
[32m+[m[32m        # First equip the item[m
[32m+[m[32m        await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "equip",[m
[32m+[m[32m            "main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        # Then unequip it[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "unequip"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert result["success"] is True[m
[32m+[m[32m        assert "Unequipped Magic Longsword" in result["message"][m
[32m+[m[32m        assert len(result["equipped_items"]) == 0[m
[32m+[m[41m        [m
[32m+[m[32m        # Check stat effects were removed[m
[32m+[m[32m        assert result["character_stats"]["armor_class"] == 10  # Back to base 10[m
[32m+[m[32m        assert result["character_stats"]["abilities"]["strength"] == 15  # Back to base 15[m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_equip_nonexistent_item(self, scribe_agent, test_character):[m
[32m+[m[32m        """Test trying to equip an item that doesn't exist."""[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            "nonexistent-item",[m
[32m+[m[32m            "equip",[m
[32m+[m[32m            "main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert "error" in result[m
[32m+[m[32m        assert "not found in inventory" in result["error"][m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_equip_item_slot_occupied(self, scribe_agent, test_character, magic_sword):[m
[32m+[m[32m        """Test trying to equip an item to an occupied slot."""[m
[32m+[m[32m        # First equip the sword[m
[32m+[m[32m        await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "equip",[m
[32m+[m[32m            "main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        # Add another weapon to inventory[m
[32m+[m[32m        another_sword = {[m
[32m+[m[32m            "id": "another-sword-456",[m
[32m+[m[32m            "name": "Iron Sword",[m
[32m+[m[32m            "equipment_type": "weapon",[m
[32m+[m[32m            "stat_effects": {"strength": 1}[m
[32m+[m[32m        }[m
[32m+[m[32m        await scribe_agent.add_to_inventory(test_character["id"], another_sword)[m
[32m+[m[41m        [m
[32m+[m[32m        # Try to equip to the same slot[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            another_sword["id"],[m
[32m+[m[32m            "equip",[m
[32m+[m[32m            "main_hand"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert "error" in result[m
[32m+[m[32m        assert "already occupied" in result["error"][m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_unequip_not_equipped_item(self, scribe_agent, test_character, magic_sword):[m
[32m+[m[32m        """Test trying to unequip an item that's not equipped."""[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "unequip"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert "error" in result[m
[32m+[m[32m        assert "not currently equipped" in result["error"][m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_auto_detect_equipment_slot(self, scribe_agent, test_character, magic_sword):[m
[32m+[m[32m        """Test auto-detection of equipment slot based on item type."""[m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            magic_sword["id"],[m
[32m+[m[32m            "equip"  # No equipment_slot provided[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert result["success"] is True[m
[32m+[m[32m        assert "weapon" in result["equipped_items"]  # Should auto-detect as weapon type[m
[32m+[m
[32m+[m[32m    @pytest.mark.asyncio[m
[32m+[m[32m    async def test_equip_non_equipment_item(self, scribe_agent, test_character):[m
[32m+[m[32m        """Test trying to equip a non-equipment item."""[m
[32m+[m[32m        # Add a regular item (not equipment)[m
[32m+[m[32m        potion = {[m
[32m+[m[32m            "id": "health-potion-789",[m
[32m+[m[32m            "name": "Health Potion",[m
[32m+[m[32m            "description": "Restores health"[m
[32m+[m[32m            # No equipment_type or stat_effects[m
[32m+[m[32m        }[m
[32m+[m[32m        await scribe_agent.add_to_inventory(test_character["id"], potion)[m
[32m+[m[41m        [m
[32m+[m[32m        result = await scribe_agent.equip_item([m
[32m+[m[32m            test_character["id"],[m
[32m+[m[32m            potion["id"],[m
[32m+[m[32m            "equip"[m
[32m+[m[32m        )[m
[32m+[m[41m        [m
[32m+[m[32m        assert "error" in result[m
[32m+[m[32m        assert "not equippable" in result["error"][m
\ No newline at end of file[m
